# -*- coding: utf-8 -*-
"""CPA_on_AES.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18f624dDfhWz9zoXjjhj_8rxvlgGdI4xv
"""

import numpy as np
from google.colab import files

# Step 1: Upload CSV
uploaded = files.upload()
# Step 2: Get filename
filename = list(uploaded.keys())[0]

# Read all data as string
data = np.genfromtxt(filename, delimiter=",", dtype=str, ) #skip_header=1

print("Shape:", data.shape)
# print("First 5 rows:\n", data[:5])

# Step 3: Split into PT, CT, tr
plaintexts = data[:, 0]          # First column
ciphertexts = data[:, 1]          # Second column
traces      = data[:, 2:].astype(float)   # Remaining columns as numeric traces

print("PT shape:", plaintexts.shape)
print("CT shape:", ciphertexts.shape)
print("tr shape:", traces.shape)

# # Quick check
# print("\nSample:")
# print("PT:", PT[:3])
# print("CT:", CT[:3])
# print("tr:", tr[:3, :5])   # first 5 trace points of first 3 rows

import numpy as np
from tqdm import tqdm

# ---------- Helper Functions ----------
# AES S-box
SBOX = [
    # 0     1      2      3      4      5      6      7      8      9      A      B      C      D      E      F
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,  # 0
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,  # 1
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,  # 2
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,  # 3
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,  # 4
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,  # 5
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,  # 6
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,  # 7
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,  # 8
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,  # 9
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,  # A
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,  # B
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,  # C
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,  # D
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,  # E
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16   # F
]

# Hamming weight lookup table
HW = [bin(x).count("1") for x in range(256)]

num_traces, num_points = traces.shape
print(f"Loaded {num_traces} traces with {num_points} samples each.")

# ---------- CPA Analysis ----------
key_guesses = range(256)
num_key_bytes = 16  # AES-128

recovered_key = []

for byte_idx in range(num_key_bytes):
    print(f"\n[+] Attacking key byte {byte_idx}...")
    max_corr = 0
    best_guess = 0

    for guess in tqdm(key_guesses, desc=f"Byte {byte_idx}"):
        # Compute hypothetical power consumption (Hamming Weight of SBOX[p ^ k])
        hyp_power = np.array([
            HW[SBOX[pt_byte ^ guess]]
            for pt_byte in [int(str(pt)[2*byte_idx:2*byte_idx+2], 16) for pt in plaintexts]
        ])

        # Correlation between hyp_power and traces
        corr = np.corrcoef(hyp_power, traces, rowvar=False)[0, 1:]
        guess_max_corr = np.max(np.abs(corr))

        if guess_max_corr > max_corr:
            max_corr = guess_max_corr
            best_guess = guess

    print(f"Best guess for byte {byte_idx}: {best_guess:02X} (corr={max_corr:.4f})")
    recovered_key.append(best_guess)

print("\nRecovered Key = " + "".join(f"{k:02X}" for k in recovered_key))

# ---------- AES-128 Implementation from Scratch ----------
# (No external crypto libraries)

# Rijndael S-box
SBOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

# Rcon (round constants)
RCON = [0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36]

# ---- Helper functions ----
def sub_word(word):
    return [SBOX[b] for b in word]

def rot_word(word):
    return word[1:] + word[:1]

def xor_words(a, b):
    return [i ^ j for i, j in zip(a, b)]

# ---- Key expansion (AES-128) ----
def key_expansion(key_bytes):
    Nk, Nb, Nr = 4, 4, 10
    w = [list(key_bytes[4*i:4*(i+1)]) for i in range(Nk)]
    for i in range(Nk, Nb*(Nr+1)):
        temp = w[i-1].copy()
        if i % Nk == 0:
            temp = xor_words(sub_word(rot_word(temp)), [RCON[(i//Nk)-1],0,0,0])
        w.append(xor_words(w[i-Nk], temp))
    return [sum(w[4*i:4*(i+1)], []) for i in range(Nr+1)]

# ---- AES Round Operations ----
def sub_bytes(state):
    return [SBOX[b] for b in state]

def shift_rows(state):
    return [
        state[0], state[5], state[10], state[15],
        state[4], state[9], state[14], state[3],
        state[8], state[13], state[2], state[7],
        state[12], state[1], state[6], state[11]
    ]

def xtime(a):
    return ((a<<1) ^ 0x1B) & 0xFF if (a & 0x80) else (a<<1)

def mix_single_column(col):
    t = col[0] ^ col[1] ^ col[2] ^ col[3]
    u = col[0]
    col[0] ^= t ^ xtime(col[0] ^ col[1])
    col[1] ^= t ^ xtime(col[1] ^ col[2])
    col[2] ^= t ^ xtime(col[2] ^ col[3])
    col[3] ^= t ^ xtime(col[3] ^ u)
    return col

def mix_columns(state):
    cols = [state[i:i+4] for i in range(0, 16, 4)]
    mixed = []
    for col in cols:
        mixed.extend(mix_single_column(col))
    return mixed

def add_round_key(state, round_key):
    return [s ^ rk for s, rk in zip(state, round_key)]

# ---- AES-128 Encrypt one block ----
def aes_encrypt_block(plaintext_bytes, key_bytes):
    round_keys = key_expansion(key_bytes)
    state = add_round_key(plaintext_bytes, round_keys[0])
    for rnd in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[rnd])
    # Final round
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[10])
    return state

# ---- Example Usage ----
if __name__ == "__main__":
    # Example: recovered key (from CPA)
    recovered_key_hex = "2b7e151628aed2a6abf7158809cf4f3c"  # replace with recovered key

    recovered_key = bytes.fromhex(recovered_key_hex)

    # Example: take first plaintext from CSV (hex string)
    plaintext_hex = plaintexts[75]
    plaintext_bytes = bytes.fromhex(plaintext_hex)


    ciphertext_verify = aes_encrypt_block(list(plaintext_bytes), list(recovered_key))
    print("Ciphertext:", "".join(f"{b:02x}" for b in ciphertext_verify))



print(ciphertexts[75])

import matplotlib.pyplot as plt

# Step 4: Sum the first 500 traces (row-wise)
summed_trace = np.sum(traces[:500, :], axis=0)

# Plot first trace
plt.figure(figsize=(10,4))
plt.plot(summed_trace, label="First Trace")
plt.xlabel("Sample points")
plt.ylabel("Power Consumption")
plt.title("Simple Power Analysis (SPA) - First AES Trace")
plt.legend()
plt.show()

# # Overlay multiple traces
# plt.figure(figsize=(10,4))
# for i in range(5):   # plot 5 traces
#     plt.plot(traces[i], alpha=0.7)
# plt.xlabel("Sample points")
# plt.ylabel("Power Consumption")
# plt.title("Overlay of Multiple AES Traces (SPA)")
# plt.show()

